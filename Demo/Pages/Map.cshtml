@page "/"
@model Demo.Pages.MapModel
@{
    ViewData["Title"] = "Revolutions Map";
}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<div id="map" style="height: 700px;"></div>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
(async function() {
    const map = L.map('map').setView([20, 0], 2);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    // load country GeoJSON
    const geojsonUrl = 'https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson';
    try {
        const g = await fetch(geojsonUrl);
        if (!g.ok) { console.warn('Could not load country GeoJSON', g.status); return; }
        const countries = await g.json();

        let loggedOnce = false;
        function pickIsoFromProps(p) {
            const candidates = ['ISO_A2','ISO_A3','iso_a2','iso_a3','ISO2','ISO_A2__','ISO_A3__','adm0_a3'];
            for (const k of candidates) {
                if (p[k]) return p[k];
            }
            for (const key of Object.keys(p)) {
                if (key.toLowerCase().includes('iso') && typeof p[key] === 'string') return p[key];
            }
            return null;
        }

        function formatDateIso(isoString) {
            if (!isoString) return '';
            try {
                const d = new Date(isoString);
                if (!isNaN(d)) return d.toLocaleDateString();
            } catch {}
            // fallback: try to extract year
            const m = isoString.match(/^(\d{4})/);
            return m ? m[1] : isoString;
        }

        function buildPopupContent(countryName, iso, items) {
            let html = `<div style="max-width:420px">`;
            html += `<h4 style="margin:.25em 0;">${countryName}${iso ? ' (' + iso + ')' : ''}</h4>`;
            if (!items || items.length === 0) {
                html += '<div>No recorded revolutions since 1950.</div></div>';
                return html;
            }

            html += `<div style="max-height:300px; overflow:auto; padding-right:6px;">`;
            // sort by start date descending
            items.sort((a,b) => {
                const da = a.startDate ? new Date(a.startDate).getTime() : 0;
                const db = b.startDate ? new Date(b.startDate).getTime() : 0;
                return db - da;
            });

            html += '<ul style="margin:0; padding-left:18px;">';
            for (const it of items) {
                const start = it.startDate ? formatDateIso(it.startDate) : 'unknown';
                const end = it.endDate ? formatDateIso(it.endDate) : '';
                const period = end ? `${start} — ${end}` : `${start}`;
                const wdLink = it.wikidataId ? ` <a href="https://www.wikidata.org/wiki/${it.wikidataId}" target="_blank" rel="noopener">Wikidata</a>` : '';
                // optional short description if present
                const desc = it.description ? ` <div style="color:#444; font-size:0.9em; margin-top:0.25em;">${(it.description.length > 140) ? it.description.slice(0,140) + '…' : it.description}</div>` : '';
                html += `<li style="margin-bottom:0.5em;"><strong>${it.name}</strong><br/><span style="font-size:0.9em;color:#333">${period}</span>${wdLink}${desc}</li>`;
            }
            html += '</ul></div></div>';
            return html;
        }

        L.geoJSON(countries, {
            style: () => ({ color: '#3388ff', weight: 1, fillOpacity: 0.05 }),
            onEachFeature: (feature, layer) => {
                if (!loggedOnce) { console.log('Example country.properties:', feature.properties); loggedOnce = true; }
                layer.on('click', async (e) => {
                    const props = feature.properties || {};
                    const name = props.ADMIN || props.NAME || props.name || '';
                    const iso = pickIsoFromProps(props);
                    if (!iso) {
                        L.popup().setLatLng(e.latlng).setContent(`<strong>${name}</strong><br/>No ISO available`).openOn(map);
                        return;
                    }
                    // request exact ISO match from server
                    const q = '/api/revolutions?countryIso=' + encodeURIComponent(iso);
                    const r = await fetch(q);
                    if (!r.ok) {
                        console.error('API error', r.status);
                        L.popup().setLatLng(e.latlng).setContent(`<strong>${name}</strong><br/>API error ${r.status}`).openOn(map);
                        return;
                    }
                    const list = await r.json();

                    // Defensive: ensure items have expected fields (name,startDate,endDate,description,wikidataId)
                    const safeList = Array.isArray(list) ? list.map(i => ({
                        name: i.name ?? '(unnamed)',
                        startDate: i.startDate ?? null,
                        endDate: i.endDate ?? null,
                        description: i.description ?? '',
                        wikidataId: i.wikidataId ?? null
                    })) : [];

                    const content = buildPopupContent(name || iso, iso, safeList);
                    L.popup({ maxWidth: 460 }).setLatLng(e.latlng).setContent(content).openOn(map);
                });
            }
        }).addTo(map);

    } catch (ex) {
        console.error('Error loading countries GeoJSON', ex);
    }
})();
</script>
