@page "/"
@model Demo.Pages.MapModel
@{
    ViewData["Title"] = "Revolutions Map";
}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<div id="map" style="height: 700px;"></div>

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>
(async function() {
    const map = L.map('map').setView([20, 0], 2);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    // load country GeoJSON
    const geojsonUrl = 'https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson';
    try {
        const g = await fetch(geojsonUrl);
        if (!g.ok) { console.warn('Could not load country GeoJSON', g.status); return; }
        const countries = await g.json();

        let loggedOnce = false;
        function pickIsoFromProps(p) {
            const candidates = ['ISO_A2','ISO_A3','iso_a2','iso_a3','ISO2','ISO_A2__','ISO_A3__','adm0_a3'];
            for (const k of candidates) {
                if (p[k]) return p[k];
            }
            for (const key of Object.keys(p)) {
                if (key.toLowerCase().includes('iso') && typeof p[key] === 'string') return p[key];
            }
            return null;
        }

        function formatDateIso(isoString) {
            if (!isoString) return '';
            try {
                const d = new Date(isoString);
                if (!isNaN(d)) return d.toLocaleDateString();
            } catch {}
            const m = isoString.match(/^(\d{4})/);
            return m ? m[1] : isoString;
        }

        function buildPopupContent(countryName, iso, items) {
            let html = `<div style="max-width:420px">`;
            html += `<h4 style="margin:.25em 0;">${countryName}${iso ? ' (' + iso + ')' : ''}</h4>`;
            if (!items || items.length === 0) {
                html += '<div>No recorded revolutions since 1950.</div></div>';
                return html;
            }

            html += `<div style="max-height:300px; overflow:auto; padding-right:6px;">`;
            items.sort((a,b) => {
                const da = a.startDate ? new Date(a.startDate).getTime() : 0;
                const db = b.startDate ? new Date(b.startDate).getTime() : 0;
                return db - da;
            });

            html += '<ul style="margin:0; padding-left:18px;">';
            for (const it of items) {
                const start = it.startDate ? formatDateIso(it.startDate) : 'unknown';
                const end = it.endDate ? formatDateIso(it.endDate) : '';
                const period = end ? `${start} — ${end}` : `${start}`;
                const wdLink = it.wikidataId ? ` <a href="https://www.wikidata.org/wiki/${it.wikidataId}" target="_blank" rel="noopener">Wikidata</a>` : '';
                const desc = it.description ? ` <div style="color:#444; font-size:0.9em; margin-top:0.25em;">${(it.description.length > 140) ? it.description.slice(0,140) + '…' : it.description}</div>` : '';
                html += `<li style="margin-bottom:0.5em;"><strong>${it.name}</strong><br/><span style="font-size:0.9em;color:#333">${period}</span>${wdLink}${desc}</li>`;
            }
            html += '</ul></div></div>';
            return html;
        }

        // small iso3->iso2 map for common codes; extend if needed
        const iso3ToIso2 = {
            "USA":"US","GBR":"GB","RUS":"RU","CHN":"CN","FRA":"FR","DEU":"DE","ESP":"ES","ITA":"IT",
            "CAN":"CA","AUS":"AU","BRA":"BR","MEX":"MX","JPN":"JP","KOR":"KR","IND":"IN","IRN":"IR"
        };

        async function fetchRevolutionsForIsoOrName(iso, name) {
            console.log('Attempting fetch for', { iso, name });
            // 1) try iso as-is
            if (iso) {
                let url = '/api/revolutions?countryIso=' + encodeURIComponent(iso);
                console.log('Requesting', url);
                let r = await fetch(url);
                if (r.ok) {
                    let list = await r.json();
                    if (Array.isArray(list) && list.length > 0) {
                        console.log('Got results for iso', iso, list.length);
                        return list;
                    }
                } else {
                    console.warn('API returned', r.status, 'for', url);
                }

                // 2) if iso is 3 chars, try iso3->iso2 mapping
                if (iso.length === 3) {
                    const iso2 = iso3ToIso2[iso.toUpperCase()];
                    if (iso2) {
                        let url2 = '/api/revolutions?countryIso=' + encodeURIComponent(iso2);
                        console.log('Trying mapped iso2', url2);
                        let r2 = await fetch(url2);
                        if (r2.ok) {
                            let list2 = await r2.json();
                            if (Array.isArray(list2) && list2.length > 0) {
                                console.log('Got results for iso2', iso2, list2.length);
                                return list2;
                            }
                        }
                    }
                }
            }

            // 3) fallback: try by country name (exact normalized server-side match may exist)
            if (name) {
                const urlName = '/api/revolutions?country=' + encodeURIComponent(name);
                console.log('Falling back to name request', urlName);
                let rn = await fetch(urlName);
                if (rn.ok) {
                    let listn = await rn.json();
                    if (Array.isArray(listn) && listn.length > 0) {
                        console.log('Got results by name', name, listn.length);
                        return listn;
                    }
                }
            }

            console.log('No results for', { iso, name });
            return [];
        }

        L.geoJSON(countries, {
            style: () => ({ color: '#3388ff', weight: 1, fillOpacity: 0.05 }),
            onEachFeature: (feature, layer) => {
                if (!loggedOnce) { console.log('Example country.properties:', feature.properties); loggedOnce = true; }
                layer.on('click', async (e) => {
                    const props = feature.properties || {};
                    const name = props.ADMIN || props.NAME || props.name || '';
                    const iso = pickIsoFromProps(props);
                    if (!iso) {
                        L.popup().setLatLng(e.latlng).setContent(`<strong>${name}</strong><br/>No ISO available`).openOn(map);
                        return;
                    }

                    const list = await fetchRevolutionsForIsoOrName(iso, name);

                    const safeList = Array.isArray(list) ? list.map(i => ({
                        name: i.name ?? '(unnamed)',
                        startDate: i.startDate ?? null,
                        endDate: i.endDate ?? null,
                        description: i.description ?? '',
                        wikidataId: i.wikidataId ?? null
                    })) : [];

                    const content = buildPopupContent(name || iso, iso, safeList);
                    L.popup({ maxWidth: 460 }).setLatLng(e.latlng).setContent(content).openOn(map);
                });
            }
        }).addTo(map);

    } catch (ex) {
        console.error('Error loading countries GeoJSON', ex);
    }
})();
</script>
